#include "Globals.h"
#include "Application.h"
#include "ModuleRender.h"
#include "ModuleGame.h"
#include "ModuleAudio.h"
#include "ModulePhysics.h"

ModuleGame::ModuleGame(Application* app, bool start_enabled) : Module(app, start_enabled)
{
	
}

ModuleGame::~ModuleGame()
{}

// Load assets
bool ModuleGame::Start()
{
	LOG("Loading Intro assets");
	bool ret = true;
	int bg[238] = {
	443, 1335,
	445, 1318,
	655, 1256,
	655, 1184,
	509, 1226,
	498, 1192,
	656, 1145,
	655, 708,
	570, 675,
	643, 456,
	649, 434,
	653, 409,
	656, 373,
	653, 331,
	647, 296,
	636, 265,
	623, 238,
	613, 221,
	603, 207,
	592, 191,
	576, 175,
	561, 161,
	545, 147,
	521, 130,
	515, 126,
	520, 116,
	544, 131,
	557, 141,
	572, 154,
	589, 171,
	605, 189,
	619, 208,
	631, 228,
	642, 251,
	651, 272,
	657, 290,
	662, 311,
	664, 326,
	668, 353,
	669, 654,
	668, 711,
	668, 1034,
	668, 1317,
	737, 1317,
	738, 1174,
	737, 940,
	737, 590,
	738, 388,
	736, 340,
	735, 318,
	729, 292,
	723, 270,
	716, 248,
	704, 219,
	691, 194,
	680, 175,
	668, 157,
	651, 136,
	634, 118,
	616, 100,
	596, 82,
	578, 69,
	558, 57,
	535, 44,
	503, 31,
	484, 24,
	462, 18,
	438, 13,
	412, 8,
	377, 7,
	343, 7,
	305, 13,
	272, 21,
	235, 34,
	204, 49,
	174, 67,
	142, 91,
	114, 118,
	92, 143,
	75, 165,
	60, 188,
	47, 212,
	37, 236,
	30, 258,
	21, 288,
	16, 314,
	13, 342,
	12, 392,
	14, 415,
	18, 438,
	22, 460,
	28, 482,
	47, 539,
	69, 607,
	92, 676,
	139, 815,
	126, 818,
	115, 822,
	106, 827,
	96, 836,
	91, 843,
	85, 855,
	83, 864,
	82, 873,
	60, 873,
	46, 877,
	32, 886,
	20, 899,
	14, 912,
	12, 920,
	12, 991,
	12, 1232,
	146, 1271,
	304, 1317,
	304, 1333,
	0, 1333,
	0, 0,
	747, 1,
	750, 1331
	};
	for (int i = 0; i < 238; i++) {
	
		PIXEL_TO_METERS(bg[i]);
	
	}
	App->physics->CreateChain(0,0,bg, 238);
	int palo1[84] = {
	221, 120,
	227, 132,
	193, 156,
	173, 175,
	151, 201,
	136, 223,
	119, 254,
	107, 284,
	101, 304,
	96, 333,
	94, 362,
	95, 397,
	97, 420,
	105, 453,
	118, 492,
	134, 539,
	151, 589,
	161, 621,
	172, 655,
	187, 698,
	199, 737,
	218, 792,
	206, 795,
	190, 747,
	173, 694,
	136, 581,
	107, 496,
	90, 443,
	86, 422,
	83, 392,
	82, 356,
	83, 337,
	88, 311,
	96, 281,
	103, 262,
	117, 232,
	122, 222,
	131, 207,
	147, 185,
	171, 160,
	205, 132,
	217, 123
	};

	for (int i = 0; i < 84; i++) {

		PIXEL_TO_METERS(palo1[i]);

	}
	App->physics->CreateChain(0, 0, palo1, 84);
	int palo2[114] = {
	177, 299,
	187, 302,
	201, 271,
	216, 250,
	232, 231,
	249, 216,
	271, 200,
	287, 191,
	309, 182,
	329, 177,
	354, 173,
	384, 172,
	403, 173,
	424, 178,
	442, 183,
	462, 192,
	479, 201,
	499, 215,
	518, 233,
	534, 251,
	544, 266,
	556, 288,
	563, 308,
	568, 322,
	571, 340,
	573, 351,
	574, 374,
	573, 394,
	569, 416,
	562, 440,
	572, 444,
	578, 427,
	582, 408,
	585, 387,
	585, 358,
	582, 333,
	578, 315,
	569, 289,
	557, 265,
	538, 237,
	520, 218,
	499, 201,
	471, 183,
	445, 172,
	415, 163,
	390, 160,
	363, 160,
	342, 162,
	311, 169,
	289, 178,
	271, 187,
	249, 202,
	227, 220,
	214, 234,
	199, 254,
	185, 278,
	179, 292
	};
	for (int i = 0; i < 114; i++) {

		PIXEL_TO_METERS(palo2[i]);

	}
	App->physics->CreateChain(0, 0, palo2, 114);
	int palo3[12] = {
	81, 973,
	81, 1179,
	237, 1224,
	251, 1194,
	95, 1146,
	95, 972
	};
	for (int i = 0; i < 12; i++) {

		PIXEL_TO_METERS(palo3[i]);

	}
	App->physics->CreateChain(0, 0, palo3, 12);
	int palo4[24] = {
	584, 965,
	587, 968,
	586, 1080,
	584, 1087,
	581, 1093,
	576, 1098,
	570, 1102,
	534, 1114,
	527, 1114,
	524, 1109,
	524, 1102,
	580, 967
	};
	for (int i = 0; i < 24; i++) {

		PIXEL_TO_METERS(palo4[i]);

	}

	App->physics->CreateChain(0, 0, palo4, 24);
	int palo5[22] = {
	174, 977,
	226, 1103,
	227, 1110,
	222, 1115,
	178, 1102,
	170, 1094,
	164, 1084,
	164, 1030,
	164, 968,
	166, 965,
	169, 967
	};
	for (int i = 0; i < 22; i++) {

		PIXEL_TO_METERS(palo5[i]);

	}

	App->physics->CreateChain(0, 0, palo5, 22);

	return ret;
}

// Load assets
bool ModuleGame::CleanUp()
{
	LOG("Unloading Intro scene");

	return true;
}

// Update: draw background
update_status ModuleGame::Update()
{
	if (IsKeyPressed(KEY_SPACE))
	{
		bodies.push_back(App->physics->CreateCircle(GetMouseX(), GetMouseY(), 25));
	}


	return UPDATE_CONTINUE;
}
